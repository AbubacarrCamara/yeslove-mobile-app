/* tslint:disable */
/* eslint-disable */
/**
 * YesLove API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AboutResponse
 */
export interface AboutResponse {
    /**
     * 
     * @type {ContactInfo}
     * @memberof AboutResponse
     */
    'contact'?: ContactInfo;
    /**
     * 
     * @type {EducationInfo}
     * @memberof AboutResponse
     */
    'education_and_employment'?: EducationInfo;
}
/**
 * 
 * @export
 * @interface AddCommentRequest
 */
export interface AddCommentRequest {
    /**
     * Content of the comment
     * @type {string}
     * @memberof AddCommentRequest
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * New password for the user
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'new_password': string;
}
/**
 * 
 * @export
 * @interface ContactInfo
 */
export interface ContactInfo {
    /**
     * User\'s full name
     * @type {string}
     * @memberof ContactInfo
     */
    'name'?: string;
    /**
     * Email address
     * @type {string}
     * @memberof ContactInfo
     */
    'email'?: string;
    /**
     * Phone number
     * @type {string}
     * @memberof ContactInfo
     */
    'phone'?: string;
    /**
     * User\'s address
     * @type {string}
     * @memberof ContactInfo
     */
    'address'?: string;
    /**
     * User\'s personal website
     * @type {string}
     * @memberof ContactInfo
     */
    'website'?: string;
}
/**
 * 
 * @export
 * @interface CreatePostRequest
 */
export interface CreatePostRequest {
    /**
     * Content of the post
     * @type {string}
     * @memberof CreatePostRequest
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface DeleteAccountRequest
 */
export interface DeleteAccountRequest {
    /**
     * Confirmation required to delete the account
     * @type {boolean}
     * @memberof DeleteAccountRequest
     */
    'confirmation': boolean;
}
/**
 * 
 * @export
 * @interface EducationInfo
 */
export interface EducationInfo {
    /**
     * User\'s birthday
     * @type {string}
     * @memberof EducationInfo
     */
    'birthday'?: string;
    /**
     * Education details
     * @type {string}
     * @memberof EducationInfo
     */
    'education'?: string;
    /**
     * Institution name
     * @type {string}
     * @memberof EducationInfo
     */
    'institution'?: string;
    /**
     * Current employment details
     * @type {string}
     * @memberof EducationInfo
     */
    'employment'?: string;
}
/**
 * 
 * @export
 * @interface EmailNotificationSettings
 */
export interface EmailNotificationSettings {
    /**
     * Unique ID for the setting
     * @type {string}
     * @memberof EmailNotificationSettings
     */
    'setting_id': string;
    /**
     * Notification enabled (true/false)
     * @type {boolean}
     * @memberof EmailNotificationSettings
     */
    'value': boolean;
}
/**
 * 
 * @export
 * @interface FeedQuery
 */
export interface FeedQuery {
    /**
     * Type of feed: \'all\', \'mentions\', \'favorites\', \'friends\', \'groups\'
     * @type {string}
     * @memberof FeedQuery
     */
    'feed_type'?: string;
}
/**
 * 
 * @export
 * @interface FollowUserRequest
 */
export interface FollowUserRequest {
    /**
     * \'follow\' to follow, \'unfollow\' to unfollow
     * @type {string}
     * @memberof FollowUserRequest
     */
    'action': string;
}
/**
 * 
 * @export
 * @interface LikePostRequest
 */
export interface LikePostRequest {
    /**
     * ID of the post to like or unlike
     * @type {number}
     * @memberof LikePostRequest
     */
    'post_id': number;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * User\'s Keycloak username
     * @type {string}
     * @memberof LoginRequest
     */
    'username': string;
    /**
     * User\'s Keycloak password
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * Post ID
     * @type {number}
     * @memberof Post
     */
    'id'?: number;
    /**
     * Username of the author
     * @type {string}
     * @memberof Post
     */
    'author'?: string;
    /**
     * URL to author\'s profile picture
     * @type {string}
     * @memberof Post
     */
    'author_pic'?: string;
    /**
     * Text content of the post
     * @type {string}
     * @memberof Post
     */
    'content'?: string;
    /**
     * URL to image in the post
     * @type {string}
     * @memberof Post
     */
    'image'?: string;
    /**
     * Timestamp of the post in ISO format
     * @type {string}
     * @memberof Post
     */
    'timestamp'?: string;
    /**
     * Number of likes
     * @type {number}
     * @memberof Post
     */
    'likes'?: number;
    /**
     * Number of comments
     * @type {number}
     * @memberof Post
     */
    'comments'?: number;
}
/**
 * 
 * @export
 * @interface PostResponse
 */
export interface PostResponse {
    /**
     * 
     * @type {Array<Post>}
     * @memberof PostResponse
     */
    'posts'?: Array<Post>;
}
/**
 * 
 * @export
 * @interface ProfileVisibilitySettings
 */
export interface ProfileVisibilitySettings {
    /**
     * Unique ID for the setting
     * @type {string}
     * @memberof ProfileVisibilitySettings
     */
    'setting_id': string;
    /**
     * Visibility value (visible/hidden)
     * @type {string}
     * @memberof ProfileVisibilitySettings
     */
    'value': string;
    /**
     * Category: \'Contact\' or \'Education And Other Information\'
     * @type {string}
     * @memberof ProfileVisibilitySettings
     */
    'category': string;
}
/**
 * 
 * @export
 * @interface ReactionRequest
 */
export interface ReactionRequest {
    /**
     * Reaction type: \'like\', \'love\', \'laugh\', \'angry\', etc.
     * @type {string}
     * @memberof ReactionRequest
     */
    'reaction_type': string;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * Valid refresh token
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * User\'s email for password reset
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface SendMessageRequest
 */
export interface SendMessageRequest {
    /**
     * ID of the recipient user
     * @type {number}
     * @memberof SendMessageRequest
     */
    'receiver_id': number;
    /**
     * Message content
     * @type {string}
     * @memberof SendMessageRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SetUserTypeRequest
 */
export interface SetUserTypeRequest {
    /**
     * Choose \'professional\' or \'standard\'
     * @type {string}
     * @memberof SetUserTypeRequest
     */
    'user_type': string;
    /**
     * License number (for professional users only)
     * @type {string}
     * @memberof SetUserTypeRequest
     */
    'license'?: string;
    /**
     * Specialization field (for professional users only)
     * @type {string}
     * @memberof SetUserTypeRequest
     */
    'specialization'?: string;
}
/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * JWT access token
     * @type {string}
     * @memberof TokenResponse
     */
    'access_token'?: string;
    /**
     * Access token expiration time in seconds
     * @type {number}
     * @memberof TokenResponse
     */
    'expires_in'?: number;
    /**
     * Refresh token expiration time in seconds
     * @type {number}
     * @memberof TokenResponse
     */
    'refresh_expires_in'?: number;
    /**
     * JWT refresh token
     * @type {string}
     * @memberof TokenResponse
     */
    'refresh_token'?: string;
    /**
     * Type of token, typically \'Bearer\'
     * @type {string}
     * @memberof TokenResponse
     */
    'token_type'?: string;
    /**
     * Time before which the token is not valid
     * @type {number}
     * @memberof TokenResponse
     */
    'not-before-policy'?: number;
    /**
     * Session identifier
     * @type {string}
     * @memberof TokenResponse
     */
    'session_state'?: string;
    /**
     * Scopes associated with the token
     * @type {string}
     * @memberof TokenResponse
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * User\'s username
     * @type {string}
     * @memberof UserProfile
     */
    'username'?: string;
    /**
     * User bio
     * @type {string}
     * @memberof UserProfile
     */
    'bio'?: string;
    /**
     * Profile picture URL
     * @type {string}
     * @memberof UserProfile
     */
    'profile_pic'?: string;
    /**
     * User type: professional or standard
     * @type {string}
     * @memberof UserProfile
     */
    'user_type'?: string;
    /**
     * 
     * @type {ContactInfo}
     * @memberof UserProfile
     */
    'contact_info'?: ContactInfo;
    /**
     * 
     * @type {EducationInfo}
     * @memberof UserProfile
     */
    'education_info'?: EducationInfo;
}
/**
 * 
 * @export
 * @interface UserQuery
 */
export interface UserQuery {
    /**
     * 
     * @type {string}
     * @memberof UserQuery
     */
    'username': string;
    /**
     * User\'s email (Optional)
     * @type {string}
     * @memberof UserQuery
     */
    'email'?: string;
    /**
     * User\'s database ID (Optional)
     * @type {number}
     * @memberof UserQuery
     */
    'user_id'?: number;
}
/**
 * 
 * @export
 * @interface UserQueryResponse
 */
export interface UserQueryResponse {
    /**
     * User\'s Keycloak ID
     * @type {string}
     * @memberof UserQueryResponse
     */
    'keycloak_id'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete user account via Keycloak API
         * @param {DeleteAccountRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeleteAccount: async (payload: DeleteAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('deleteDeleteAccount', 'payload', payload)
            const localVarPath = `/api/auth/delete_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change user password via Keycloak API
         * @param {ChangePasswordRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChangePassword: async (payload: ChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postChangePassword', 'payload', payload)
            const localVarPath = `/api/auth/change_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Exchange user credentials for a Keycloak access token and check user type
         * @param {LoginRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (payload: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postLogin', 'payload', payload)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout user from Keycloak
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout: async (payload: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postLogout', 'payload', payload)
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh expired access token using Keycloak refresh token
         * @param {RefreshTokenRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRefreshToken: async (payload: RefreshTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postRefreshToken', 'payload', payload)
            const localVarPath = `/api/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send password reset email via Keycloak API
         * @param {ResetPasswordRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResetPassword: async (payload: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postResetPassword', 'payload', payload)
            const localVarPath = `/api/auth/reset_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set user type (professional or standard) for new users
         * @param {SetUserTypeRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSetUserType: async (payload: SetUserTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postSetUserType', 'payload', payload)
            const localVarPath = `/api/auth/set_user_type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Keycloak handles user registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignup: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete user account via Keycloak API
         * @param {DeleteAccountRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeleteAccount(payload: DeleteAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeleteAccount(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.deleteDeleteAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change user password via Keycloak API
         * @param {ChangePasswordRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postChangePassword(payload: ChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postChangePassword(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postChangePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Exchange user credentials for a Keycloak access token and check user type
         * @param {LoginRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(payload: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogin(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout user from Keycloak
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogout(payload: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogout(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Refresh expired access token using Keycloak refresh token
         * @param {RefreshTokenRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRefreshToken(payload: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRefreshToken(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postRefreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send password reset email via Keycloak API
         * @param {ResetPasswordRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postResetPassword(payload: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postResetPassword(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postResetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set user type (professional or standard) for new users
         * @param {SetUserTypeRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSetUserType(payload: SetUserTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSetUserType(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postSetUserType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Keycloak handles user registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSignup(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSignup(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postSignup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete user account via Keycloak API
         * @param {DeleteAccountRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeleteAccount(payload: DeleteAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDeleteAccount(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change user password via Keycloak API
         * @param {ChangePasswordRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChangePassword(payload: ChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postChangePassword(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Exchange user credentials for a Keycloak access token and check user type
         * @param {LoginRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(payload: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.postLogin(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout user from Keycloak
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout(payload: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postLogout(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh expired access token using Keycloak refresh token
         * @param {RefreshTokenRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRefreshToken(payload: RefreshTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.postRefreshToken(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send password reset email via Keycloak API
         * @param {ResetPasswordRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResetPassword(payload: ResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postResetPassword(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set user type (professional or standard) for new users
         * @param {SetUserTypeRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSetUserType(payload: SetUserTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postSetUserType(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Keycloak handles user registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignup(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postSignup(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Delete user account via Keycloak API
     * @param {DeleteAccountRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public deleteDeleteAccount(payload: DeleteAccountRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).deleteDeleteAccount(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change user password via Keycloak API
     * @param {ChangePasswordRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postChangePassword(payload: ChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postChangePassword(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Exchange user credentials for a Keycloak access token and check user type
     * @param {LoginRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postLogin(payload: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postLogin(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout user from Keycloak
     * @param {object} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postLogout(payload: object, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postLogout(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh expired access token using Keycloak refresh token
     * @param {RefreshTokenRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postRefreshToken(payload: RefreshTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postRefreshToken(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send password reset email via Keycloak API
     * @param {ResetPasswordRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postResetPassword(payload: ResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postResetPassword(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set user type (professional or standard) for new users
     * @param {SetUserTypeRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postSetUserType(payload: SetUserTypeRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postSetUserType(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Keycloak handles user registration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postSignup(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postSignup(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch chat messages between two users
         * @param {number} receiverId 
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetMessages: async (receiverId: number, payload: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'receiverId' is not null or undefined
            assertParamExists('getGetMessages', 'receiverId', receiverId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('getGetMessages', 'payload', payload)
            const localVarPath = `/api/chat/get_messages/{receiver_id}`
                .replace(`{${"receiver_id"}}`, encodeURIComponent(String(receiverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send a private message
         * @param {SendMessageRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendMessage: async (payload: SendMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postSendMessage', 'payload', payload)
            const localVarPath = `/api/chat/send_message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch chat messages between two users
         * @param {number} receiverId 
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGetMessages(receiverId: number, payload: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGetMessages(receiverId, payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.getGetMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send a private message
         * @param {SendMessageRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSendMessage(payload: SendMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSendMessage(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.postSendMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch chat messages between two users
         * @param {number} receiverId 
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetMessages(receiverId: number, payload: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getGetMessages(receiverId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send a private message
         * @param {SendMessageRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendMessage(payload: SendMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postSendMessage(payload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * 
     * @summary Fetch chat messages between two users
     * @param {number} receiverId 
     * @param {object} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public getGetMessages(receiverId: number, payload: object, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).getGetMessages(receiverId, payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send a private message
     * @param {SendMessageRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public postSendMessage(payload: SendMessageRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).postSendMessage(payload, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FeedApi - axios parameter creator
 * @export
 */
export const FeedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch posts based on selected feed type (All Updates, Mentions, Favorites, Friends, Groups)
         * @param {FeedQuery} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeed: async (payload: FeedQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('getFeed', 'payload', payload)
            const localVarPath = `/api/feed/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all comments for a post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetComments: async (postId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getGetComments', 'postId', postId)
            const localVarPath = `/api/feed/post/{post_id}/comments`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all followers of a user
         * @param {string} keycloakId 
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetFollowers: async (keycloakId: string, payload: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keycloakId' is not null or undefined
            assertParamExists('getGetFollowers', 'keycloakId', keycloakId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('getGetFollowers', 'payload', payload)
            const localVarPath = `/api/feed/followers/{keycloak_id}`
                .replace(`{${"keycloak_id"}}`, encodeURIComponent(String(keycloakId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all users the current user is following
         * @param {string} keycloakId 
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetFollowing: async (keycloakId: string, payload: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keycloakId' is not null or undefined
            assertParamExists('getGetFollowing', 'keycloakId', keycloakId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('getGetFollowing', 'payload', payload)
            const localVarPath = `/api/feed/following/{keycloak_id}`
                .replace(`{${"keycloak_id"}}`, encodeURIComponent(String(keycloakId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a comment to a post
         * @param {number} postId 
         * @param {AddCommentRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddComment: async (postId: number, payload: AddCommentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('postAddComment', 'postId', postId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postAddComment', 'payload', payload)
            const localVarPath = `/api/feed/post/{post_id}/comment`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new post
         * @param {CreatePostRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreatePost: async (payload: CreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postCreatePost', 'payload', payload)
            const localVarPath = `/api/feed/post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Follow or unfollow a user
         * @param {string} keycloakId 
         * @param {FollowUserRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFollowUser: async (keycloakId: string, payload: FollowUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keycloakId' is not null or undefined
            assertParamExists('postFollowUser', 'keycloakId', keycloakId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postFollowUser', 'payload', payload)
            const localVarPath = `/api/feed/follow/{keycloak_id}`
                .replace(`{${"keycloak_id"}}`, encodeURIComponent(String(keycloakId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Like or unlike a post
         * @param {number} postId 
         * @param {LikePostRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLikePost: async (postId: number, payload: LikePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('postLikePost', 'postId', postId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postLikePost', 'payload', payload)
            const localVarPath = `/api/feed/post/{post_id}/like`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ).
         * @summary Add or update a reaction to a post (like, love, laugh, etc
         * @param {number} postId 
         * @param {ReactionRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReactToPost: async (postId: number, payload: ReactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('postReactToPost', 'postId', postId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postReactToPost', 'payload', payload)
            const localVarPath = `/api/feed/post/{post_id}/reaction`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedApi - functional programming interface
 * @export
 */
export const FeedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch posts based on selected feed type (All Updates, Mentions, Favorites, Friends, Groups)
         * @param {FeedQuery} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeed(payload: FeedQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeed(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.getFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all comments for a post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGetComments(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGetComments(postId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.getGetComments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all followers of a user
         * @param {string} keycloakId 
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGetFollowers(keycloakId: string, payload: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGetFollowers(keycloakId, payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.getGetFollowers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all users the current user is following
         * @param {string} keycloakId 
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGetFollowing(keycloakId: string, payload: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGetFollowing(keycloakId, payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.getGetFollowing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a comment to a post
         * @param {number} postId 
         * @param {AddCommentRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAddComment(postId: number, payload: AddCommentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAddComment(postId, payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.postAddComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new post
         * @param {CreatePostRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreatePost(payload: CreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreatePost(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.postCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Follow or unfollow a user
         * @param {string} keycloakId 
         * @param {FollowUserRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFollowUser(keycloakId: string, payload: FollowUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFollowUser(keycloakId, payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.postFollowUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Like or unlike a post
         * @param {number} postId 
         * @param {LikePostRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLikePost(postId: number, payload: LikePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLikePost(postId, payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.postLikePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ).
         * @summary Add or update a reaction to a post (like, love, laugh, etc
         * @param {number} postId 
         * @param {ReactionRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReactToPost(postId: number, payload: ReactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postReactToPost(postId, payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.postReactToPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeedApi - factory interface
 * @export
 */
export const FeedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch posts based on selected feed type (All Updates, Mentions, Favorites, Friends, Groups)
         * @param {FeedQuery} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeed(payload: FeedQuery, options?: RawAxiosRequestConfig): AxiosPromise<PostResponse> {
            return localVarFp.getFeed(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all comments for a post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetComments(postId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getGetComments(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all followers of a user
         * @param {string} keycloakId 
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetFollowers(keycloakId: string, payload: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getGetFollowers(keycloakId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all users the current user is following
         * @param {string} keycloakId 
         * @param {object} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetFollowing(keycloakId: string, payload: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getGetFollowing(keycloakId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a comment to a post
         * @param {number} postId 
         * @param {AddCommentRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddComment(postId: number, payload: AddCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postAddComment(postId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new post
         * @param {CreatePostRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreatePost(payload: CreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postCreatePost(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Follow or unfollow a user
         * @param {string} keycloakId 
         * @param {FollowUserRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFollowUser(keycloakId: string, payload: FollowUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postFollowUser(keycloakId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Like or unlike a post
         * @param {number} postId 
         * @param {LikePostRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLikePost(postId: number, payload: LikePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postLikePost(postId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * ).
         * @summary Add or update a reaction to a post (like, love, laugh, etc
         * @param {number} postId 
         * @param {ReactionRequest} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReactToPost(postId: number, payload: ReactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postReactToPost(postId, payload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
export class FeedApi extends BaseAPI {
    /**
     * 
     * @summary Fetch posts based on selected feed type (All Updates, Mentions, Favorites, Friends, Groups)
     * @param {FeedQuery} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public getFeed(payload: FeedQuery, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).getFeed(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all comments for a post
     * @param {number} postId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public getGetComments(postId: number, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).getGetComments(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all followers of a user
     * @param {string} keycloakId 
     * @param {object} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public getGetFollowers(keycloakId: string, payload: object, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).getGetFollowers(keycloakId, payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all users the current user is following
     * @param {string} keycloakId 
     * @param {object} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public getGetFollowing(keycloakId: string, payload: object, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).getGetFollowing(keycloakId, payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a comment to a post
     * @param {number} postId 
     * @param {AddCommentRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public postAddComment(postId: number, payload: AddCommentRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).postAddComment(postId, payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new post
     * @param {CreatePostRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public postCreatePost(payload: CreatePostRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).postCreatePost(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Follow or unfollow a user
     * @param {string} keycloakId 
     * @param {FollowUserRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public postFollowUser(keycloakId: string, payload: FollowUserRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).postFollowUser(keycloakId, payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Like or unlike a post
     * @param {number} postId 
     * @param {LikePostRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public postLikePost(postId: number, payload: LikePostRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).postLikePost(postId, payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ).
     * @summary Add or update a reaction to a post (like, love, laugh, etc
     * @param {number} postId 
     * @param {ReactionRequest} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public postReactToPost(postId: number, payload: ReactionRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).postReactToPost(postId, payload, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user contact & education details for About section
         * @param {string} keycloakId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbout: async (keycloakId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keycloakId' is not null or undefined
            assertParamExists('getAbout', 'keycloakId', keycloakId)
            const localVarPath = `/api/profile/about/{keycloak_id}`
                .replace(`{${"keycloak_id"}}`, encodeURIComponent(String(keycloakId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get email notification settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailNotifications: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profile/email_notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get profile visibility settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileVisibility: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profile/profile_visibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile
         * @param {string} keycloakId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (keycloakId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keycloakId' is not null or undefined
            assertParamExists('getUserProfile', 'keycloakId', keycloakId)
            const localVarPath = `/api/profile/profile/{keycloak_id}`
                .replace(`{${"keycloak_id"}}`, encodeURIComponent(String(keycloakId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update email notification settings
         * @param {EmailNotificationSettings} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailNotifications: async (payload: EmailNotificationSettings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postEmailNotifications', 'payload', payload)
            const localVarPath = `/api/profile/email_notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a user\'s Keycloak ID by username (required), with optional email or user ID
         * @param {UserQuery} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetUserKeycloakIdFlexible: async (payload: UserQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postGetUserKeycloakIdFlexible', 'payload', payload)
            const localVarPath = `/api/profile/user/keycloak_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update profile visibility settings
         * @param {ProfileVisibilitySettings} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProfileVisibility: async (payload: ProfileVisibilitySettings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postProfileVisibility', 'payload', payload)
            const localVarPath = `/api/profile/profile_visibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user profile
         * @param {UserProfile} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateProfile: async (payload: UserProfile, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('putUpdateProfile', 'payload', payload)
            const localVarPath = `/api/profile/update_profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user contact & education details for About section
         * @param {string} keycloakId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbout(keycloakId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AboutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbout(keycloakId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.getAbout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get email notification settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailNotifications(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailNotifications(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.getEmailNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get profile visibility settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileVisibility(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileVisibility(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.getProfileVisibility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user profile
         * @param {string} keycloakId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(keycloakId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfile(keycloakId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.getUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update email notification settings
         * @param {EmailNotificationSettings} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEmailNotifications(payload: EmailNotificationSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEmailNotifications(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.postEmailNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a user\'s Keycloak ID by username (required), with optional email or user ID
         * @param {UserQuery} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetUserKeycloakIdFlexible(payload: UserQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserQueryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetUserKeycloakIdFlexible(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.postGetUserKeycloakIdFlexible']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update profile visibility settings
         * @param {ProfileVisibilitySettings} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProfileVisibility(payload: ProfileVisibilitySettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProfileVisibility(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.postProfileVisibility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update user profile
         * @param {UserProfile} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUpdateProfile(payload: UserProfile, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUpdateProfile(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.putUpdateProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary Get user contact & education details for About section
         * @param {string} keycloakId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbout(keycloakId: string, options?: RawAxiosRequestConfig): AxiosPromise<AboutResponse> {
            return localVarFp.getAbout(keycloakId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get email notification settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailNotifications(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEmailNotifications(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get profile visibility settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileVisibility(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getProfileVisibility(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user profile
         * @param {string} keycloakId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(keycloakId: string, options?: RawAxiosRequestConfig): AxiosPromise<UserProfile> {
            return localVarFp.getUserProfile(keycloakId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update email notification settings
         * @param {EmailNotificationSettings} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailNotifications(payload: EmailNotificationSettings, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postEmailNotifications(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a user\'s Keycloak ID by username (required), with optional email or user ID
         * @param {UserQuery} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetUserKeycloakIdFlexible(payload: UserQuery, options?: RawAxiosRequestConfig): AxiosPromise<UserQueryResponse> {
            return localVarFp.postGetUserKeycloakIdFlexible(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update profile visibility settings
         * @param {ProfileVisibilitySettings} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProfileVisibility(payload: ProfileVisibilitySettings, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postProfileVisibility(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user profile
         * @param {UserProfile} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateProfile(payload: UserProfile, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putUpdateProfile(payload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @summary Get user contact & education details for About section
     * @param {string} keycloakId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getAbout(keycloakId: string, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getAbout(keycloakId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get email notification settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getEmailNotifications(options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getEmailNotifications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get profile visibility settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getProfileVisibility(options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getProfileVisibility(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user profile
     * @param {string} keycloakId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getUserProfile(keycloakId: string, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getUserProfile(keycloakId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update email notification settings
     * @param {EmailNotificationSettings} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public postEmailNotifications(payload: EmailNotificationSettings, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).postEmailNotifications(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a user\'s Keycloak ID by username (required), with optional email or user ID
     * @param {UserQuery} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public postGetUserKeycloakIdFlexible(payload: UserQuery, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).postGetUserKeycloakIdFlexible(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update profile visibility settings
     * @param {ProfileVisibilitySettings} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public postProfileVisibility(payload: ProfileVisibilitySettings, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).postProfileVisibility(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user profile
     * @param {UserProfile} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public putUpdateProfile(payload: UserProfile, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).putUpdateProfile(payload, options).then((request) => request(this.axios, this.basePath));
    }
}



